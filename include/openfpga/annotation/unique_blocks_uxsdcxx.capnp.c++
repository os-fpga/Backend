// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: unique_blocks_uxsdcxx.capnp

#include "unique_blocks_uxsdcxx.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<36> b_c16da73cfbff13c7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    199,  19, 255, 251,  60, 167, 109, 193,
     32,   0,   0,   0,   2,   0,   0,   0,
    140,  75, 153,  85,  69, 240, 193, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 110,  47, 117, 110, 105, 113,
    117, 101,  95,  98, 108, 111,  99, 107,
    115,  95, 117, 120, 115, 100,  99, 120,
    120,  46,  99,  97, 112, 110, 112,  58,
     84, 121, 112, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 120, 115, 100,  73, 110, 118,  97,
    108, 105, 100,   0,   0,   0,   0,   0,
     99,  98, 120,   0,   0,   0,   0,   0,
     99,  98, 121,   0,   0,   0,   0,   0,
    115,  98,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c16da73cfbff13c7 = b_c16da73cfbff13c7.words;
#if !CAPNP_LITE
static const uint16_t m_c16da73cfbff13c7[] = {1, 2, 3, 0};
const ::capnp::_::RawSchema s_c16da73cfbff13c7 = {
  0xc16da73cfbff13c7, b_c16da73cfbff13c7.words, 36, nullptr, m_c16da73cfbff13c7,
  0, 4, nullptr, nullptr, nullptr, { &s_c16da73cfbff13c7, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Type_c16da73cfbff13c7, c16da73cfbff13c7);
static const ::capnp::_::AlignedData<50> b_cc86674979cf0fd6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    214,  15, 207, 121,  73, 103, 134, 204,
     32,   0,   0,   0,   1,   0,   1,   0,
    140,  75, 153,  85,  69, 240, 193, 172,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 110,  47, 117, 110, 105, 113,
    117, 101,  95,  98, 108, 111,  99, 107,
    115,  95, 117, 120, 115, 100,  99, 120,
    120,  46,  99,  97, 112, 110, 112,  58,
     73, 110, 115, 116,  97, 110,  99, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cc86674979cf0fd6 = b_cc86674979cf0fd6.words;
#if !CAPNP_LITE
static const uint16_t m_cc86674979cf0fd6[] = {0, 1};
static const uint16_t i_cc86674979cf0fd6[] = {0, 1};
const ::capnp::_::RawSchema s_cc86674979cf0fd6 = {
  0xcc86674979cf0fd6, b_cc86674979cf0fd6.words, 50, nullptr, m_cc86674979cf0fd6,
  0, 2, i_cc86674979cf0fd6, nullptr, nullptr, { &s_cc86674979cf0fd6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<84> b_e65125b552e5bccc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204, 188, 229,  82, 181,  37,  81, 230,
     32,   0,   0,   0,   1,   0,   2,   0,
    140,  75, 153,  85,  69, 240, 193, 172,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 110,  47, 117, 110, 105, 113,
    117, 101,  95,  98, 108, 111,  99, 107,
    115,  95, 117, 120, 115, 100,  99, 120,
    120,  46,  99,  97, 112, 110, 112,  58,
     66, 108, 111,  99, 107,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    199,  19, 255, 251,  60, 167, 109, 193,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    214,  15, 207, 121,  73, 103, 134, 204,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e65125b552e5bccc = b_e65125b552e5bccc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e65125b552e5bccc[] = {
  &s_c16da73cfbff13c7,
  &s_cc86674979cf0fd6,
};
static const uint16_t m_e65125b552e5bccc[] = {3, 0, 1, 2};
static const uint16_t i_e65125b552e5bccc[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_e65125b552e5bccc = {
  0xe65125b552e5bccc, b_e65125b552e5bccc.words, 84, d_e65125b552e5bccc, m_e65125b552e5bccc,
  2, 4, i_e65125b552e5bccc, nullptr, nullptr, { &s_e65125b552e5bccc, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_f6ad8a85615a2b06 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6,  43,  90,  97, 133, 138, 173, 246,
     32,   0,   0,   0,   1,   0,   0,   0,
    140,  75, 153,  85,  69, 240, 193, 172,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 110,  47, 117, 110, 105, 113,
    117, 101,  95,  98, 108, 111,  99, 107,
    115,  95, 117, 120, 115, 100,  99, 120,
    120,  46,  99,  97, 112, 110, 112,  58,
     85, 110, 105, 113, 117, 101,  66, 108,
    111,  99, 107, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
     98, 108, 111,  99, 107, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    204, 188, 229,  82, 181,  37,  81, 230,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f6ad8a85615a2b06 = b_f6ad8a85615a2b06.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f6ad8a85615a2b06[] = {
  &s_e65125b552e5bccc,
};
static const uint16_t m_f6ad8a85615a2b06[] = {0};
static const uint16_t i_f6ad8a85615a2b06[] = {0};
const ::capnp::_::RawSchema s_f6ad8a85615a2b06 = {
  0xf6ad8a85615a2b06, b_f6ad8a85615a2b06.words, 39, d_f6ad8a85615a2b06, m_f6ad8a85615a2b06,
  1, 1, i_f6ad8a85615a2b06, nullptr, nullptr, { &s_f6ad8a85615a2b06, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace ucap {

// Instance
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Instance::_capnpPrivate::dataWordSize;
constexpr uint16_t Instance::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Instance::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Instance::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Block
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Block::_capnpPrivate::dataWordSize;
constexpr uint16_t Block::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Block::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Block::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UniqueBlocks
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UniqueBlocks::_capnpPrivate::dataWordSize;
constexpr uint16_t UniqueBlocks::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UniqueBlocks::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UniqueBlocks::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace

