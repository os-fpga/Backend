diff --git a/vpr/CMakeLists.txt b/vpr/CMakeLists.txt
index 371d11f39..c4baf79ae 100644
--- a/vpr/CMakeLists.txt
+++ b/vpr/CMakeLists.txt
@@ -1,7 +1,34 @@
-cmake_minimum_required(VERSION 3.16)
+cmake_minimum_required(VERSION 3.14)
 
 project("vpr")
 
+if (PRODUCTION_BUILD)
+    get_filename_component(FLEX_LM_SRC_DIR "../../../Raptor_Tools/Flex_LM"
+    REALPATH BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
+    add_subdirectory(${FLEX_LM_SRC_DIR} flex_lm)
+    message("Production Build type set to ON")
+    set (PRODUCTION_BUILD_FLAG "-DPRODUCTION_BUILD=1")
+    add_definitions(-DPRODUCTION_BUILD)
+    message("FLEX: "  ${FLEX_LM_SRC_DIR})
+endif(PRODUCTION_BUILD)
+
+option(ENABLE_VERIFIC "Enable Verific front end" OFF)
+
+  get_filename_component(READ_VERILOG_SRC_DIR "../../../Raptor_Tools/gatelevel_readers/read_verilog"
+  REALPATH BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}" CACHE)
+  add_subdirectory(${READ_VERILOG_SRC_DIR} read_verilog)
+  get_filename_component(VERI_PRUNE_SRC_DIR "../../../Raptor_Tools/gatelevel_readers/veri_prune"
+  REALPATH BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}" CACHE)
+  add_subdirectory(${VERI_PRUNE_SRC_DIR} veri_prune)
+  if(ENABLE_VERIFIC)
+      get_filename_component(VERIFIC_HOME "../../../Raptor_Tools/verific_rs/"
+      REALPATH BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}" CACHE)
+      add_subdirectory(${VERIFIC_HOME} verific_rs)
+  endif()
+  get_filename_component(READ_EDIF_SRC_DIR "../../../Raptor_Tools/gatelevel_readers/read_edif"
+  REALPATH BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}" CACHE)
+  add_subdirectory(${READ_EDIF_SRC_DIR} read_edif)
+
 set(VPR_EXECUTION_ENGINE "auto" CACHE STRING "Specify the framework for (potential) parallel execution")
 set_property(CACHE VPR_EXECUTION_ENGINE PROPERTY STRINGS auto serial tbb)
 
@@ -12,6 +39,22 @@ set_property(CACHE VPR_PGO_CONFIG PROPERTY STRINGS prof_gen prof_use none)
 
 set(VPR_PGO_DATA_DIR "." CACHE PATH "Where to store and retrieve PGO data")
 
+find_package(PkgConfig REQUIRED)
+pkg_search_module(OPENSSL REQUIRED openssl)
+
+if( OPENSSL_FOUND )
+    include_directories(${OPENSSL_INCLUDE_DIRS})
+    message(STATUS "Using OpenSSL ${OPENSSL_VERSION}")
+else()
+    message("SSL not found")
+    # Error; with REQUIRED, pkg_search_module() will throw an error by it's own
+endif()
+
+
+if(ENABLE_VERIFIC)
+    add_compile_definitions(ENABLE_VERIFIC)
+endif()
+
 #Handle graphics setup
 set(GRAPHICS_DEFINES "")
 
@@ -41,6 +84,26 @@ include(CheckCXXSymbolExists)
 file(GLOB_RECURSE EXEC_SOURCES src/main.cpp)
 file(GLOB_RECURSE LIB_SOURCES src/*/*.cpp)
 file(GLOB_RECURSE LIB_HEADERS src/*/*.h)
+
+if(ENABLE_VERIFIC)
+    list(APPEND VERIFIC_LIBS
+        ${VERIFIC_HOME}/verilog/verilog-linux.a
+        ${VERIFIC_HOME}/database/database-linux.a
+        ${VERIFIC_HOME}/util/util-linux.a
+        ${VERIFIC_HOME}/containers/containers-linux.a
+        ${VERIFIC_HOME}/hier_tree/hier_tree-linux.a
+        ${VERIFIC_HOME}/vhdl/vhdl-linux.a
+        ${VERIFIC_HOME}/hdl_encrypt/hdl_encrypt-linux.a
+    )
+    list (APPEND LIB_HEADERS ${VERIFIC_HOME}/hdl_encrypt/hdl_encrypt.h)
+    list (APPEND LIB_HEADERS ${VERIFIC_HOME}/verilog/veri_file.h)
+    list (APPEND LIB_HEADERS ${VERIFIC_HOME}/util/Protect.h)
+    list (APPEND LIB_HEADERS ${READ_VERILOG_SRC_DIR}/src/read_nl/ieee_1735.h)
+endif()
+    list (APPEND LIB_HEADERS ${READ_VERILOG_SRC_DIR}/src/read_nl/simple_netlist.h)
+    list (APPEND LIB_HEADERS ${VERI_PRUNE_SRC_DIR}/src/veri_prune/veri_prune.h)
+
+list (APPEND LIB_HEADERS ${READ_EDIF_SRC_DIR}/src/edif_blif.hpp)
 files_to_dirs(LIB_HEADERS LIB_INCLUDE_DIRS)
 
 if(${VTR_ENABLE_CAPNPROTO})
@@ -60,6 +123,11 @@ add_library(libvpr STATIC
 
 
 target_include_directories(libvpr PUBLIC ${LIB_INCLUDE_DIRS})
+    target_include_directories(libvpr PUBLIC ${READ_VERILOG_SRC_DIR})
+    target_include_directories(libvpr PUBLIC ${VERI_PRUNE_SRC_DIR})
+    set(read_verilog_lib libreadver)
+    set(veri_prune_lib libveriprune)
+target_include_directories(libvpr PUBLIC ${READ_EDIF_SRC_DIR})
 
 #VPR_ANALYTIC_PLACE is inisitalized in the root CMakeLists
 #Check Eigen dependency
@@ -79,8 +147,12 @@ endif()
 
 set_target_properties(libvpr PROPERTIES PREFIX "") #Avoid extra 'lib' prefix
 
-#Specify link-time dependancies
-target_link_libraries(libvpr
+if (PRODUCTION_BUILD)
+    target_include_directories(libvpr PUBLIC
+                                ${FLEX_LM_SRC_DIR}
+                                ${FLEX_LM_SRC_DIR}/machind)
+    #Specify link-time dependancies
+    target_link_libraries(libvpr
                             libvtrutil
                             libarchfpga
                             libsdcparse
@@ -89,7 +161,29 @@ target_link_libraries(libvpr
                             libargparse
                             libpugixml
                             librrgraph
-)
+                            ${read_verilog_lib}
+                            ${veri_prune_lib}
+                            libreadedif
+                            rs_licenseManager
+                            ${OPENSSL_LIBRARIES}
+                             ${VERIFIC_LIBS})
+else()
+    #Specify link-time dependancies
+    target_link_libraries(libvpr
+                            libvtrutil
+                            libarchfpga
+                            libsdcparse
+                            libblifparse
+                            libtatum
+                            libargparse
+                            libpugixml
+                            librrgraph
+                            ${read_verilog_lib}
+                            ${veri_prune_lib}
+                            libreadedif
+                            ${OPENSSL_LIBRARIES}
+                             ${VERIFIC_LIBS})
+endif(PRODUCTION_BUILD)
 
 #link graphics library only when graphics set to on
 if (VPR_USE_EZGL STREQUAL "on")
@@ -236,7 +330,7 @@ endif()
 #Configure the build to use the selected engine
 if (VPR_USE_EXECUTION_ENGINE STREQUAL "tbb")
     target_compile_definitions(libvpr PRIVATE VPR_USE_TBB)
-    target_link_libraries(libvpr tbb)
+    target_link_libraries(libvpr ${TBB_LIBRARIES})
     target_link_libraries(libvpr ${TBB_tbbmalloc_proxy_LIBRARY}) #Use the scalable memory allocator
     message(STATUS "VPR: will support parallel execution using '${VPR_USE_EXECUTION_ENGINE}'")
 elseif(VPR_USE_EXECUTION_ENGINE STREQUAL "serial")
@@ -257,7 +351,6 @@ if (VPR_USE_SIGNAL_HANDLER)
 endif()
 
 install(TARGETS vpr libvpr DESTINATION bin)
-install(FILES ${LIB_HEADERS} DESTINATION include/libvpr)
 
 
 #
