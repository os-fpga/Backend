diff --git a/vpr/CMakeLists.txt b/vpr/CMakeLists.txt
index 371d11f39..15ff2d899 100644
--- a/vpr/CMakeLists.txt
+++ b/vpr/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.16)
+cmake_minimum_required(VERSION 3.14)
 
 project("vpr")
 
@@ -32,6 +32,10 @@ else()
     message(STATUS "EZGL: graphics disabled")
 endif()
 
+# 1st RS patch
+include("${CMAKE_CURRENT_LIST_DIR}/VPR_CMake_RS1.cmake")
+message(STATUS "NOTE: INCLUDED VPR_CMake_RS1.cmake\n")
+
 #
 # Build Configuration
 #
@@ -41,6 +45,26 @@ include(CheckCXXSymbolExists)
 file(GLOB_RECURSE EXEC_SOURCES src/main.cpp)
 file(GLOB_RECURSE LIB_SOURCES src/*/*.cpp)
 file(GLOB_RECURSE LIB_HEADERS src/*/*.h)
+
+if(ENABLE_VERIFIC)
+    list(APPEND VERIFIC_LIBS
+        ${VERIFIC_HOME}/verilog/verilog-linux.a
+        ${VERIFIC_HOME}/database/database-linux.a
+        ${VERIFIC_HOME}/util/util-linux.a
+        ${VERIFIC_HOME}/containers/containers-linux.a
+        ${VERIFIC_HOME}/hier_tree/hier_tree-linux.a
+        ${VERIFIC_HOME}/vhdl/vhdl-linux.a
+        ${VERIFIC_HOME}/hdl_encrypt/hdl_encrypt-linux.a
+    )
+    list (APPEND LIB_HEADERS ${VERIFIC_HOME}/hdl_encrypt/hdl_encrypt.h)
+    list (APPEND LIB_HEADERS ${VERIFIC_HOME}/verilog/veri_file.h)
+    list (APPEND LIB_HEADERS ${VERIFIC_HOME}/util/Protect.h)
+    list (APPEND LIB_HEADERS ${READ_VERILOG_SRC_DIR}/src/read_nl/ieee_1735.h)
+endif()
+list (APPEND LIB_HEADERS ${READ_VERILOG_SRC_DIR}/src/read_nl/simple_netlist.h)
+list (APPEND LIB_HEADERS ${VERI_PRUNE_SRC_DIR}/src/veri_prune/veri_prune.h)
+list (APPEND LIB_HEADERS ${READ_EDIF_SRC_DIR}/src/edif_blif.hpp)
+
 files_to_dirs(LIB_HEADERS LIB_INCLUDE_DIRS)
 
 if(${VTR_ENABLE_CAPNPROTO})
@@ -60,6 +84,11 @@ add_library(libvpr STATIC
 
 
 target_include_directories(libvpr PUBLIC ${LIB_INCLUDE_DIRS})
+target_include_directories(libvpr PUBLIC ${READ_VERILOG_SRC_DIR})
+target_include_directories(libvpr PUBLIC ${VERI_PRUNE_SRC_DIR})
+set(read_verilog_lib libreadver)
+set(veri_prune_lib libveriprune)
+target_include_directories(libvpr PUBLIC ${READ_EDIF_SRC_DIR})
 
 #VPR_ANALYTIC_PLACE is inisitalized in the root CMakeLists
 #Check Eigen dependency
@@ -80,16 +109,9 @@ endif()
 set_target_properties(libvpr PROPERTIES PREFIX "") #Avoid extra 'lib' prefix
 
 #Specify link-time dependancies
-target_link_libraries(libvpr
-                        libvtrutil
-                        libarchfpga
-                        libsdcparse
-                        libblifparse
-                        libtatum
-                        libargparse
-                        libpugixml
-                        librrgraph
-)
+# 2nd RS patch - PRODUCTION_BUILD
+include("${CMAKE_CURRENT_LIST_DIR}/VPR_CMake_PRODUCTION_BUILD_RS2.cmake")
+message(STATUS "NOTE: INCLUDED VPR_CMake_PRODUCTION_BUILD_RS2.cmake\n")
 
 #link graphics library only when graphics set to on
 if (VPR_USE_EZGL STREQUAL "on")
@@ -236,7 +258,7 @@ endif()
 #Configure the build to use the selected engine
 if (VPR_USE_EXECUTION_ENGINE STREQUAL "tbb")
     target_compile_definitions(libvpr PRIVATE VPR_USE_TBB)
-    target_link_libraries(libvpr tbb)
+    target_link_libraries(libvpr ${TBB_LIBRARIES})
     target_link_libraries(libvpr ${TBB_tbbmalloc_proxy_LIBRARY}) #Use the scalable memory allocator
     message(STATUS "VPR: will support parallel execution using '${VPR_USE_EXECUTION_ENGINE}'")
 elseif(VPR_USE_EXECUTION_ENGINE STREQUAL "serial")
@@ -257,7 +279,6 @@ if (VPR_USE_SIGNAL_HANDLER)
 endif()
 
 install(TARGETS vpr libvpr DESTINATION bin)
-install(FILES ${LIB_HEADERS} DESTINATION include/libvpr)
 
 
 #
