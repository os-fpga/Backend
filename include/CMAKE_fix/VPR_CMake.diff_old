diff --git a/vpr/CMakeLists.txt b/vpr/CMakeLists.txt
index 433ef2730..fa6b7f352 100644
--- a/vpr/CMakeLists.txt
+++ b/vpr/CMakeLists.txt
@@ -32,6 +32,10 @@ else()
     message(STATUS "EZGL: graphics disabled")
 endif()
 
+# 1st RS patch
+include("${CMAKE_CURRENT_LIST_DIR}/VPR_CMake_RS1.cmake")
+message(STATUS "NOTE: INCLUDED VPR_CMake_RS1.cmake\n")
+
 #
 # Build Configuration
 #
@@ -41,6 +45,24 @@ include(CheckCXXSymbolExists)
 file(GLOB_RECURSE EXEC_SOURCES src/main.cpp)
 file(GLOB_RECURSE LIB_SOURCES src/*/*.cpp)
 file(GLOB_RECURSE LIB_HEADERS src/*/*.h)
+
+if(ENABLE_VERIFIC)
+    list(APPEND VERIFIC_LIBS
+        ${VERIFIC_HOME}/verilog/verilog-linux.a
+        ${VERIFIC_HOME}/database/database-linux.a
+        ${VERIFIC_HOME}/util/util-linux.a
+        ${VERIFIC_HOME}/containers/containers-linux.a
+        ${VERIFIC_HOME}/hier_tree/hier_tree-linux.a
+        ${VERIFIC_HOME}/vhdl/vhdl-linux.a
+        ${VERIFIC_HOME}/hdl_encrypt/hdl_encrypt-linux.a
+    )
+    list (APPEND LIB_HEADERS ${VERIFIC_HOME}/hdl_encrypt/hdl_encrypt.h)
+    list (APPEND LIB_HEADERS ${VERIFIC_HOME}/verilog/veri_file.h)
+    list (APPEND LIB_HEADERS ${VERIFIC_HOME}/util/Protect.h)
+    list (APPEND LIB_HEADERS ${READ_VERILOG_SRC_DIR}/src/read_nl/ieee_1735.h)
+endif()
+list (APPEND LIB_HEADERS ${READ_EDIF_SRC_DIR}/src/edif_blif.hpp)
+
 files_to_dirs(LIB_HEADERS LIB_INCLUDE_DIRS)
 
 if(${VPR_DEBUG_PARTITION_TREE})
@@ -56,6 +78,7 @@ add_library(libvpr STATIC
 
 
 target_include_directories(libvpr PUBLIC ${LIB_INCLUDE_DIRS})
+target_include_directories(libvpr PUBLIC ${READ_EDIF_SRC_DIR})
 
 #VPR_ANALYTIC_PLACE is initialized in the root CMakeLists
 #Check Eigen dependency
@@ -85,6 +108,9 @@ target_link_libraries(libvpr
                         libargparse
                         libpugixml
                         librrgraph
+                        libreadedif
+                        ${OPENSSL_LIBRARIES}
+                        ${VERIFIC_LIBS} dl
 )
 
 #link graphics library only when graphics set to on
@@ -233,7 +259,7 @@ endif()
 #Configure the build to use the selected engine
 if (VPR_USE_EXECUTION_ENGINE STREQUAL "tbb")
     target_compile_definitions(libvpr PRIVATE VPR_USE_TBB)
-    target_link_libraries(libvpr tbb)
+    target_link_libraries(libvpr ${TBB_LIBRARIES})
     target_link_libraries(libvpr ${TBB_tbbmalloc_proxy_LIBRARY}) #Use the scalable memory allocator
     message(STATUS "VPR: will support parallel execution using '${VPR_USE_EXECUTION_ENGINE}'")
 elseif(VPR_USE_EXECUTION_ENGINE STREQUAL "serial")
